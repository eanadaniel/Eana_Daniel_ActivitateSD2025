#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// trebuie sa folositi fisierul masini.txt
// sau va creati un alt fisier cu alte date

struct StructuraMasina {
	int id;
	int nrUsi;
	float pret;
	char* model;
	char* numeSofer;
	unsigned char serie;
};
typedef struct StructuraMasina Masina;

// creare structura pentru un nod dintr-un arbore binar de cautare
struct Nod {
	Masina info;
	struct Nod* st;
	struct Nod* dr;
};
typedef struct Nod Nod;

Masina citireMasinaDinFisier(FILE* file) {
	char buffer[100];
	char sep[3] = ",\n";
	fgets(buffer, 100, file);
	char* aux;
	Masina m1;
	aux = strtok(buffer, sep);
	m1.id = atoi(aux);
	m1.nrUsi = atoi(strtok(NULL, sep));
	m1.pret = atof(strtok(NULL, sep));
	aux = strtok(NULL, sep);
	m1.model = malloc(strlen(aux) + 1);
	strcpy_s(m1.model, strlen(aux) + 1, aux);

	aux = strtok(NULL, sep);
	m1.numeSofer = malloc(strlen(aux) + 1);
	strcpy_s(m1.numeSofer, strlen(aux) + 1, aux);

	m1.serie = *strtok(NULL, sep);
	return m1;
}

void afisareMasina(Masina masina) {
	printf("Id: %d\n", masina.id);
	printf("Nr. usi : %d\n", masina.nrUsi);
	printf("Pret: %.2f\n", masina.pret);
	printf("Model: %s\n", masina.model);
	printf("Nume sofer: %s\n", masina.numeSofer);
	printf("Serie: %c\n\n", masina.serie);
}

int calculeazaInaltimeArbore(Nod* radacina) {
	if (radacina == NULL) return 0;
	int nSt = calculeazaInaltimeArbore(radacina->st);
	int nDr = calculeazaInaltimeArbore(radacina->dr);
	return 1 + (nSt > nDr ? nSt : nDr);
}

int calculGrad(Nod* radacina) {
	if (radacina) {
		return calculeazaInaltimeArbore(radacina->st) - calculeazaInaltimeArbore(radacina->dr);
	}
	else return 0;
}

void rotireStanga(Nod** radacina) {
	if (*radacina) {
		Nod* aux = (*radacina)->dr;
		(*radacina)->dr = aux->st;
		aux->st = *radacina;
		*radacina = aux;
	}
}

void rotireDreapta(Nod** radacina) {
	if (*radacina) {
		Nod* aux = (*radacina)->st;
		(*radacina)->st = aux->dr;
		aux->dr = *radacina;
		*radacina = aux;
	}
}

void adaugaMasinaInArbore(Nod** arbore, Masina masinaNoua) {
	if (*arbore == NULL) {
		Nod* nou = (Nod*)malloc(sizeof(Nod));
		nou->info = masinaNoua;
		nou->st = NULL;
		nou->dr = NULL;
		*arbore = nou;
		return;
	}

	if (masinaNoua.id < (*arbore)->info.id) {
		adaugaMasinaInArbore(&(*arbore)->st, masinaNoua);
	}
	else if (masinaNoua.id > (*arbore)->info.id) {
		adaugaMasinaInArbore(&(*arbore)->dr, masinaNoua);
	}
	else {
		// Id duplicat - nu inserÄƒm
		return;
	}

	int grad = calculGrad(*arbore);

	if (grad == 2) {
		int gradStanga = calculGrad((*arbore)->st);
		if (gradStanga >= 0) {
			rotireDreapta(arbore);
		}
		else {
			rotireStanga(&(*arbore)->st);
			rotireDreapta(arbore);
		}
	}
	else if (grad == -2) {
		int gradDreapta = calculGrad((*arbore)->dr);
		if (gradDreapta <= 0) {
			rotireStanga(arbore);
		}
		else {
			rotireDreapta(&(*arbore)->dr);
			rotireStanga(arbore);
		}
	}
}

Nod* citireArboreDeMasiniDinFisier(const char* numeFisier) {
	
	FILE* f = fopen(numeFisier, "r");
	Nod* arbore = NULL;
	while (!feof(f))
	{
		Masina m = citireMasinaDinFisier(f);
		adaugaMasinaInArbore(&arbore, m);
	}
	fclose(f);
	return arbore;
}

void afisareInOrdine(Nod* arbore) {
	if (arbore) {
		afisareInOrdine(arbore->st);
		afisareMasina(arbore->info);
		afisareInOrdine(arbore->dr);
	}
}

void afisarePreOrdine(Nod* arbore) {
	if (arbore) {
		afisareMasina(arbore->info);
		afisarePreOrdine(arbore->st);
		afisarePreOrdine(arbore->dr);
	}
}

void afisarePostOrdine(Nod* arbore) {
	if (arbore) {
		afisarePostOrdine(arbore->st);
		afisarePostOrdine(arbore->dr);
		afisareMasina(arbore->info);
	}
}

void afisareMasiniDinArbore(Nod* nod) {
	if (nod == NULL) {
		printf("Arborele este gol.\n");
		return;
	}

	printf("=== Preordine ===\n");
	afisarePreOrdine(nod);
	printf("\n");

	printf("=== Inordine ===\n");
	afisareInOrdine(nod);
	printf("\n");

	printf("=== Postordine ===\n");
	afisarePostOrdine(nod);
	printf("\n");
}

void dezalocareArboreDeMasini(Nod** arbore) {
	if (*arbore) {
		dezalocareArboreDeMasini(&(*arbore)->st);
		dezalocareArboreDeMasini(&(*arbore)->dr);
		free((*arbore)->info.model);
		free((*arbore)->info.numeSofer);
		free(*arbore);
		*arbore = NULL;
	}
}

Masina getMasinaByID(Nod* arbore, int id) {
	Masina m;
	m.id = -1;
	if (arbore) {
		if (arbore->info.id < id) {
			return getMasinaByID(arbore->dr, id);
		}
		else if (arbore->info.id > id) {
			return getMasinaByID(arbore->st, id);
		}
		else {
			return arbore->info;
		}
	}
	return m;
}

int determinaNumarNoduri(Nod* radacina) {
	if (radacina == NULL) return 0;
	return 1 + determinaNumarNoduri(radacina->st) + determinaNumarNoduri(radacina->dr);
}

int main() {
	Nod* radacina = NULL;
	radacina = citireArboreDeMasiniDinFisier("masini.txt");

	printf("Numar noduri: %d\n", determinaNumarNoduri(radacina));
	printf("Inaltime arbore: %d\n", calculeazaInaltimeArbore(radacina));

	printf("\n\n\n");
	afisareMasiniDinArbore(radacina);

	dezalocareArboreDeMasini(&radacina);
	return 0;
}
